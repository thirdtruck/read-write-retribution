#!/usr/bin/env ruby

require 'sinatra'
require 'mongoid'
require 'pp'

class Page
  include Mongoid::Document

  field :identifier, type: String
  field :title, type: String

  embeds_many :tokens

  index({ identifier: 1 }, { unique: true })

  def self.from_file(filepath)
    page_name = File.basename(filepath, File.extname(filepath))

    tokens = []

    File.foreach(filepath) do |line|
      case line
      when /^\s*$/
        tokens << Token.new(text: "<p></p>", degrades: false)
      else
        tokens.concat tokenize(line)
      end
    end

    page = Page.new(identifier: page_name, title: page_name, tokens: tokens)
  end
end

def degrade(text)
  undegraded_char_indices = []

  text.split('').each_with_index do |character, index|
    undegraded_char_indices << index if character =~ /[a-zA-Z]/
  end

  return text if undegraded_char_indices.length == 0

  char_to_degrade = undegraded_char_indices[rand(0...undegraded_char_indices.length)]

  text[char_to_degrade] = '_'

  text
end

def tokenize(line)
  line = line.strip

  tokens = []

  parts = line.split(/(\]\]|\[\[|\|)/)

  inside_link = false
  inside_link_path = false
  link_text = nil

  parts.each do |part|
    case part
    when "[["
      inside_link = true
      inside_link_path = false
      link_text = nil
    when "|"
      inside_link_path = true
    when "]]"
      inside_link = false
      inside_link_path = false
      link_text = nil
    else
      if inside_link
        if inside_link_path
          links_to = part
          links_to.gsub!(' ', '_')
          tokens << Token.new(text: link_text, links_to: links_to, degrades: false)
        else
          link_text = part
        end
      else
        tokens << Token.new(text: part, degrades: true)
      end
    end
  end

  return tokens
end

class Token
  include Mongoid::Document

  field :text, type: String
  field :links_to, type: String
  field :degrades, type: Boolean

  embedded_in :page

  def render
    if links_to
      "<a href=\"/#{links_to}\">#{text}</a>"
    else
      text
    end
  end

  def degraded
    return self unless degrades

    degraded_text = degrade(text)

    Token.new(text: degraded_text, links_to: links_to, degrades: degrades)
  end
end

def setup_sinatra
  port = ARGV[0] ? ARGV[0].to_i : 4567
  set :port, port
end

def setup_mongodb
  if ENV['MONGOLAB_URI']
    env = { mongo_uri: URI.parse(ENV['MONGOLAB_URI']) }
    pp env
    Mongoid.load!("config/heroku.yml", env)
  else
    Mongoid.load!("config/mongoid.yml")
    Mongoid.logger = Logger.new($stdout)
    Mongoid.logger.level = Logger::DEBUG
    Moped.logger = Logger.new($stdout)
    Moped.logger.level = Logger::DEBUG
  end
end

def initialize_pages
  Page.where({}).delete # Empty the collection before rebuilding it

  Dir.glob('pages/*.txt') do |page_file|
    page = Page.from_file(page_file)
    page.save
  end
end

setup_sinatra
setup_mongodb

initialize_pages

get '/' do
  redirect to('/start')
end

get '/:page' do |page_identifier|
  page = Page.where(identifier: page_identifier).first
  pass unless page

  page.tokens = page.tokens.map(&:degraded)
  page.save
  page.tokens.map(&:render).join('')
end

